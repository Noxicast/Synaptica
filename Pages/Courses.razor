@page "/courses"

@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.EntityFrameworkCore
@using Synaptica.Services
@using Synaptica.Shared.Models
@using Synaptica.Data
@using System.Data.SqlTypes
@using System

@inject SynpaticaDbContext DbContext
@inject Synaptica.Services.SessionService sessionService


<h3>Available Courses</h3>

@if (courses != null && courses.Count > 0)
{
    <div class="course-list">

        <!-- displays available courses in the database with (title,description,Enroll button)-->
        @foreach (var course in courses)
        {
            <div class="course-item">
                <h4>@(course.Title ?? "No Title Available")</h4>
                <p>@(course.Description ?? "No Description Available")</p>
                <p><strong>Duration:</strong> @(course.Duration ?? "No Duration Provided")</p>
                @if(userEnrolled(course.CourseId) == false) {
                    <button @onclick="() => Enroll(course.CourseId)">Enroll</button>
                } else {
                    <button @onclick="() => DropCourse(course.CourseId)">Drop Course</button>
                }
            </div>
        }
    </div>
}
else
{   
    <p>No courses available at the moment.</p>
}

@code {

    private List<Course>? courses;

    protected override async Task OnInitializedAsync()
    {
        //TEMP HARDCODED
        sessionService.LoggedInUser = 1;
        try
        {
            //Get the course list from the Courses table in the DB
            courses = await DbContext.Courses.ToListAsync();
        }
        catch (SqlNullValueException ex)
        {
            // Handle the situation where data contains null values where it shouldn't
            Console.WriteLine("Data contains null values: " + ex.Message);
        }
    }

    private bool userEnrolled(int courseId)  {
        //checks the db to determine if the user is registered to the course in question
        var enrollment = DbContext.Enrollments.FirstOrDefault(e => e.UserId == sessionService.LoggedInUser && e.CourseId == courseId);
        if (enrollment != null) {
            return true;
        } else {
            return false;
        }
    }

    private void DropCourse(int courseId) {
        //checks the db to determine if the user is registered to the course in question
        var enrollment = DbContext.Enrollments.FirstOrDefault(e => e.UserId == sessionService.LoggedInUser && e.CourseId == courseId);

        //Removes and saves the enrollment object as a new entry in the table
        DbContext.Enrollments.Remove(enrollment!);
        DbContext.SaveChanges();
    }

    private void Enroll(int CourseId)
    {
        Console.WriteLine(CourseId);

        //Creates a new Enrollment object to be saved in Enrollment table
        var enrollment = new Enrollment {
            EnrollmentDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
            Progress = "noneWIP", //to be initalised at 0 in whatever format we will choose
            UserId = sessionService.LoggedInUser,
            CourseId = CourseId //Corresponds to the id of the course linked to the enroll button calling this method
        };
        Console.WriteLine(enrollment);

        //Adds and saves the enrollment object as a new entry in the table
        DbContext.Enrollments.Add(enrollment);
        DbContext.SaveChanges();
    }
}    
