@page "/quiz/{QuizId:int}"
@inject NavigationManager Navigation

<PageTitle>Quiz</PageTitle>

@if (currentQuestionIndex < quizQuestions.Count && !isTimeUp)
{
    <div class="quiz-container">
        <h2>@quizTitle</h2>
        <p class="timer"><strong>Time Remaining:</strong> @formattedTime</p>
        <p><strong>Question @(currentQuestionIndex + 1):</strong> @quizQuestions[currentQuestionIndex].Question</p>

        <div class="options">
            @for (int i = 0; i < quizQuestions[currentQuestionIndex].Options.Count; i++)
            {
                var optionIndex = i;
                <button class="@GetOptionClass(optionIndex)"
                        @onclick="() => SelectOption(optionIndex)"
                        disabled="@isAnswered">
                    @quizQuestions[currentQuestionIndex].Options[i]
                </button>
            }
        </div>

        @if (isAnswered)
        {
            <div class="feedback">
                @if (selectedOption == quizQuestions[currentQuestionIndex].CorrectAnswer)
                {
                    <p class="correct-feedback">Correct!</p>
                }
                else
                {
                    <p class="wrong-feedback">
                        Incorrect. The correct answer was:
                        @quizQuestions[currentQuestionIndex].Options[quizQuestions[currentQuestionIndex].CorrectAnswer]
                    </p>
                }
            </div>
            <button class="next-btn"
                    @onclick="NextQuestion"
                    disabled="@(currentQuestionIndex >= quizQuestions.Count)">
                @nextButtonLabel
            </button>
        }
    </div>
}
else
{
    <div class="results-container">
        @if (isTimeUp)
        {
            <h2>Time's Up!</h2>
            <p>You completed <strong>@currentQuestionIndex</strong> out of <strong>@quizQuestions.Count</strong> questions.</p>
        }
        else
        {
            <h2>Quiz Completed!</h2>
            <p>You got <strong>@correctAnswers</strong> out of <strong>@quizQuestions.Count</strong> correct!</p>
        }
        <button class="btn btn-primary" @onclick="ReturnToHome">Back to Quizzes</button>
    </div>
}

@code {
    [Parameter] public int QuizId { get; set; }

    private string quizTitle = "Sample Quiz";  
    private List<QuizQuestion> quizQuestions = new();
    private int currentQuestionIndex = 0;
    private int selectedOption = -1;
    private bool isAnswered = false;
    private int correctAnswers = 0;

    private bool isTimeUp = false;
    private TimeSpan timeRemaining;
    private string formattedTime => $"{timeRemaining.Minutes:D2}:{timeRemaining.Seconds:D2}";
    private System.Timers.Timer timer;

    private string nextButtonLabel => currentQuestionIndex < quizQuestions.Count - 1 ? "Next Question" : "Finish Quiz";

    protected override void OnInitialized()
    {
         
        quizQuestions = QuizService.GetQuestionsByQuizId(QuizId);  
        quizTitle = QuizService.GetQuizTitle(QuizId);

        
        timeRemaining = QuizId == 1 ? TimeSpan.FromMinutes(10) : TimeSpan.FromMinutes(5);

        
        timer = new System.Timers.Timer(1000);  
        timer.Elapsed += UpdateTimer;
        timer.Start();
    }

    private void UpdateTimer(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (timeRemaining.TotalSeconds > 0)
        {
            timeRemaining = timeRemaining.Subtract(TimeSpan.FromSeconds(1));
            InvokeAsync(StateHasChanged);  
        }
        else
        {
            isTimeUp = true;
            timer.Stop();
            InvokeAsync(StateHasChanged);
        }
    }

    private void SelectOption(int index)
    {
        if (!isAnswered)
        {
            selectedOption = index;
            isAnswered = true;

            if (index == quizQuestions[currentQuestionIndex].CorrectAnswer)
            {
                correctAnswers++;
            }
        }
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < quizQuestions.Count - 1)
        {
            
            currentQuestionIndex++;
            selectedOption = -1;
            isAnswered = false;
        }
        else
        {
            
            currentQuestionIndex++;
        }
    }

    private void ReturnToHome()
    {
        timer.Stop();
        Navigation.NavigateTo("/quizzes");
    }

    private string GetOptionClass(int index)
    {
        if (!isAnswered) return "option";
        if (index == quizQuestions[currentQuestionIndex].CorrectAnswer) return "option correct";
        if (index == selectedOption) return "option wrong";
        return "option";
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
